// 2. Add Two Numbers
// 09/12
// O(n) time: 53ms - beat 63.13% submission

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        return process(l1, l2, 0);
    }
    
    public ListNode process(ListNode l1, ListNode l2, int extra){
        if (l1 == null && l2 == null) {
            if (extra == 1)
                return new ListNode(1);
            return null;
        }
        if (l1 == null)
            return process(l2, extra);
        if (l2 == null)
            return process(l1, extra);
        ListNode newNode;
        int sum = l1.val + l2.val + extra;
        if (sum > 9) {
            newNode = new ListNode(sum - 10);
            newNode.next = process(l1.next, l2.next, 1);
        }
        else {
            newNode = new ListNode(sum);
            newNode.next = process(l1.next, l2.next, 0);
        }
        return newNode;    
    }
    
    public ListNode process(ListNode l1, int extra){
        if (l1 == null) {
            if (extra == 1)
                return new ListNode(1);
            return null;
        }
        
        ListNode newNode;
        int sum = l1.val + extra;
        if (sum > 9) {
            newNode = new ListNode(0);
            newNode.next = process(l1.next, 1);
        }
        else {
            newNode = new ListNode(sum);            
            newNode.next = process(l1.next, 0);
        }
        return newNode;
    }
    
}
